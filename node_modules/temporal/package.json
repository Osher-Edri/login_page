{
  "_args": [
    [
      {
        "raw": "temporal@latest",
        "scope": null,
        "escapedName": "temporal",
        "name": "temporal",
        "rawSpec": "latest",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\osher\\Documents\\worketest\\p.s.osh\\node_modules\\johnny-five"
    ]
  ],
  "_from": "temporal@latest",
  "_id": "temporal@0.7.1",
  "_inCache": true,
  "_location": "/temporal",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/temporal_0.7.1_1533744222143_0.7326610435220287"
  },
  "_npmUser": {
    "name": "rwaldron",
    "email": "waldron.rick@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "temporal@latest",
    "scope": null,
    "escapedName": "temporal",
    "name": "temporal",
    "rawSpec": "latest",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/johnny-five"
  ],
  "_resolved": "https://registry.npmjs.org/temporal/-/temporal-0.7.1.tgz",
  "_shasum": "dd79946107c3414a24fffab7dd79243409ea6bd2",
  "_shrinkwrap": null,
  "_spec": "temporal@latest",
  "_where": "C:\\Users\\osher\\Documents\\worketest\\p.s.osh\\node_modules\\johnny-five",
  "author": {
    "name": "Rick Waldron",
    "email": "waldron.rick@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/rwaldron/temporal/issues"
  },
  "contributors": [
    {
      "name": "Matthieu Dehaussy",
      "email": "<mdehaussy@carlipa.com"
    },
    {
      "name": "Taha Hesham",
      "email": "<taha@wizylabs.com"
    }
  ],
  "dependencies": {},
  "description": "Non-blocking, temporal task sequencing and scheduling.",
  "devDependencies": {
    "grunt": "^1.0.3",
    "grunt-contrib-jshint": "latest",
    "grunt-contrib-nodeunit": "latest",
    "grunt-contrib-watch": "latest",
    "grunt-jsbeautifier": "latest"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6Xd3c2llgkjGP7kn2LXuiHZ8/cRiIX5EsPcvn8slkAcayWEzf7xuXxd7BcgUm2djmI1DPFUSMFeFwQcLVMLsOw==",
    "shasum": "dd79946107c3414a24fffab7dd79243409ea6bd2",
    "tarball": "https://registry.npmjs.org/temporal/-/temporal-0.7.1.tgz",
    "fileCount": 7,
    "unpackedSize": 15787,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbaxReCRA9TVsSAnZWagAA9mkP+gPI4s3KRDods/5Rhuqv\nykAUxyT9CBlkW+dtklFy76amYafPbzb0EVaBq3NDXPSWdqM/nstFojQnUzt5\nmqduqpHm+gxVskefG5Nhgm96dydTznPDL1v5JyOFlSrf+/ZoUVQZRMeShlpj\nFhmye7k+pJKaytbsojEKNIHF3a/niVXrsACGQjZd91Q4WI/ahbgXqqd5ojQ/\n1Y3bS3lxhkWcoITHZ3wcstR6h7jwOLqYap2kCblrFZ2wCIaWo8yfJQdWtBnB\nU3HTupLDN1PHF/lbhcLmsuQHDHFx0HzWgBdrbHqBhIv0BhTvLL04e6Vb6O4z\nCRaRivW0S9TZXxLxE1YSmLOywTiMLHceYAsw0xxmNUXxUjm5Xce+7cK0RxM2\n/enBxUvk22QWGLTTTfJNCiCayfxyupuxbOcIV0C8848SmAaL3hpNHylAvzty\nUiybBC5/4785if6PwiPrKfgKuznHaQsmQWB9/pNi3/Ln5Hr09epvrSc7qqPX\n7HofvGYZhHT2XDVFOBfP6XW1Kbd2pcXuTByer++WFeLrrxR4sxxjrkRl1q1V\nZTyWgz7+TAJDYGqzRTN88AwH8bJ/VvgZ/BqZuaKwHPhpCRGnqFMec0cSCryU\nesS3Sgu88ouatAfkwvcJJbpv+K9h6Bj/sLPl2jL+35geAqeEs73yLunwc7mZ\n0dxO\r\n=JZUZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "ca4ba5e20d841d295b0af9bcbbdd92884ff6ee62",
  "homepage": "https://github.com/rwaldron/temporal",
  "keywords": [
    "schedule",
    "task",
    "settimeout",
    "setinterval",
    "nexttick",
    "process",
    "sequence",
    "sequencing",
    "loop",
    "repeat",
    "wait",
    "delay",
    "sleep"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rwaldron/temporal/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/temporal",
  "maintainers": [
    {
      "name": "dtex",
      "email": "donovan@donovan.bz"
    },
    {
      "name": "rwaldron",
      "email": "waldron.rick@gmail.com"
    }
  ],
  "name": "temporal",
  "optionalDependencies": {},
  "readme": "# temporal\n\n\n[![Build Status](https://travis-ci.org/rwaldron/temporal.svg)](https://travis-ci.org/rwaldron/temporal)\n\nNon-blocking, temporal task sequencing. `temporal` does NOT use `setTimeout` or `setInterval`, however there is a cost for using \"recursive\" `setImmediate` to create an extremely fast, async execution loop. CPU usage is expected to peak when using `temporal`, because the internal ticker needs to execute as fast as possible and as many times per second as possible. It's this speed that allows `temporal` to review the internal schedule for tasks to execute more than once per millisecond, which is needed to create preferential execution cycles for hardware programming. \n\n`temporal` is for writing timing sensitive programs that are expected to be the primary process running on a given system, where the power source itself is tuned to accommodate _that program_ specifically. Concrete examples include: \n\n- walking robots (autonomous and remote control bipeds, quadrupeds or hexapods)\n- driving robots (autonomous and remote control rovers)\n- flying robots (autonomous and remote control single and multi-rotor helicopter)\n- water based robots (underwater rovs, surface boat-likes)\n\n`temporal` allows for sub-millisecond task scheduling through us of the resolution method. \n\n`temporal` is not good for sparse task scheduling. \n\n\n## Presentations\n\n- [EmpireJS](https://dl.dropboxusercontent.com/u/3531958/empirejs/index.html)\n- [CascadiaJS](https://dl.dropboxusercontent.com/u/3531958/cascadiajs/index.html)\n\n\n\n\n## Getting Started\n\n```bash\nnpm install temporal\n```\n\n\n## Examples\n\n```javascript\nvar temporal = require(\"temporal\");\n\ntemporal.on(\"idle\", function() {\n  console.log(\"Temporal is idle\");  \n});\n\n// Wait 500 milliseconds, execute a task\ntemporal.delay(500, function() {\n\n  console.log(\"500ms later...\");\n\n});\n\n// Loop every n milliseconds, executing a task each time\ntemporal.loop(500, function() {\n\n  console.log(\"Every 500ms...\");\n\n  // |this| is a reference to the temporal instance\n  // use it to cancel the loop by calling:\n  //\n  this.stop();\n\n  // The number of times this loop has been executed:\n  this.called; // number\n\n  // The first argument to the callback is the same as |this|\n});\n\n\n// Queue a sequence of tasks: delay, delay\n// Each delay time is added to the prior delay times.\ntemporal.queue([\n  {\n    delay: 500,\n    task: function() {\n      // Executes 500ms after temporal.queue(...) is called\n    }\n  },\n  {\n    delay: 500,\n    task: function() {\n      // Executes 1000ms after temporal.queue(...) is called\n\n      // The last \"delay\" task will emit an \"ended\" event\n    }\n  }\n]);\n\n// Queue a sequence of tasks: delay then loop\n// Each delay time is added to the prior delay times.\ntemporal.queue([\n  {\n    delay: 500,\n    task: function() {\n      // Executes 500ms after temporal.queue(...) is called\n    }\n  },\n  {\n    loop: 100,\n    task: function() {\n      // Executes 600ms after temporal.queue(...) is called\n\n      // Executes every 100ms thereafter.\n    }\n  }\n]);\n```\n\n```javascript\nvar temporal = require(\"temporal\");\n\ntemporal.on(\"idle\", function() {\n  console.log(\"Temporal is idle\");  \n});\n\n// Set temporal resolution to 0.1ms\ntemporal.resolution(0.1);\n\n// Wait 0.7 milliseconds, execute a task\ntemporal.delay(0.7, function() {\n\n  console.log(\"0.7ms later...\");\n\n});\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/gruntjs/grunt).\n\n\n## License\nSee LICENSE file.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rwaldron/temporal.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "0.7.1"
}
